/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.JRootPane;
import javax.swing.WindowConstants;
import model.Ingredients;
import model.Pizza;

/**
 *
 * @author Zsombor
 */
public class ModifyPizzaView extends javax.swing.JFrame {

    private Pizza pizza;

    /**
     * Creates new form ModifyPizzaView
     */
    public ModifyPizzaView(Pizza pizza) {

        initComponents();
        this.pizza = pizza;
        getContentPane().setBackground(new Color(0, 204, 204));
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }

    public ModifyPizzaView() {
        initComponents();
    }

    public void modify() {
        String ingredient = "";
        for (Ingredients i : pizza.getIngredients()) {
            ingredient = i.getName();
            switch (ingredient) {
                case "Onion":
                    onionCheck.setSelected(true);
                    break;
                case "Chilli Peppers":
                    chilliPeppersCheck.setSelected(true);
                    break;
                case "Pineaple":
                    pineapleCheck.setSelected(true);
                    break;
                case "Minced Meat":
                    mincedMeatCheck.setSelected(true);
                    break;
                case "Kebab Meat":
                    kebabMeatCheck.setSelected(true);
                    break;
                case "Olives":
                    olivesCheck.setSelected(true);
                    break;
                case "Hot Sauce":
                    hotSauceCheck.setSelected(true);
                    break;
                case "Kebab Sauce":
                    kebabSauceCheck.setSelected(true);
                    break;
                case "Ham":
                    hamCheck.setSelected(true);
                    break;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cheeseCheck = new javax.swing.JCheckBox();
        hamCheck = new javax.swing.JCheckBox();
        olivesCheck = new javax.swing.JCheckBox();
        chilliPeppersCheck = new javax.swing.JCheckBox();
        kebabMeatCheck = new javax.swing.JCheckBox();
        hotSauceCheck = new javax.swing.JCheckBox();
        kebabSauceCheck = new javax.swing.JCheckBox();
        pineapleCheck = new javax.swing.JCheckBox();
        onionCheck = new javax.swing.JCheckBox();
        mincedMeatCheck = new javax.swing.JCheckBox();
        confirm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cheeseCheck.setBackground(new java.awt.Color(0, 204, 204));
        cheeseCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cheeseCheck.setText("Extra Ost 10kr");
        cheeseCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cheeseCheckActionPerformed(evt);
            }
        });

        hamCheck.setBackground(new java.awt.Color(0, 204, 204));
        hamCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hamCheck.setText("Skinka 10kr");
        hamCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hamCheckActionPerformed(evt);
            }
        });

        olivesCheck.setBackground(new java.awt.Color(0, 204, 204));
        olivesCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        olivesCheck.setText("Oliver 10kr");
        olivesCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                olivesCheckActionPerformed(evt);
            }
        });

        chilliPeppersCheck.setBackground(new java.awt.Color(0, 204, 204));
        chilliPeppersCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chilliPeppersCheck.setText("Peperoni 10kr");
        chilliPeppersCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chilliPeppersCheckActionPerformed(evt);
            }
        });

        kebabMeatCheck.setBackground(new java.awt.Color(0, 204, 204));
        kebabMeatCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        kebabMeatCheck.setText("Kebabkött 10kr");
        kebabMeatCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kebabMeatCheckActionPerformed(evt);
            }
        });

        hotSauceCheck.setBackground(new java.awt.Color(0, 204, 204));
        hotSauceCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hotSauceCheck.setText("Stark sås 10kr");
        hotSauceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotSauceCheckActionPerformed(evt);
            }
        });

        kebabSauceCheck.setBackground(new java.awt.Color(0, 204, 204));
        kebabSauceCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        kebabSauceCheck.setText("Kebabsås 10kr");
        kebabSauceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kebabSauceCheckActionPerformed(evt);
            }
        });

        pineapleCheck.setBackground(new java.awt.Color(0, 204, 204));
        pineapleCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pineapleCheck.setText("Annanas 10kr");
        pineapleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pineapleCheckActionPerformed(evt);
            }
        });

        onionCheck.setBackground(new java.awt.Color(0, 204, 204));
        onionCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        onionCheck.setText("Lök 10kr");
        onionCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onionCheckActionPerformed(evt);
            }
        });

        mincedMeatCheck.setBackground(new java.awt.Color(0, 204, 204));
        mincedMeatCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mincedMeatCheck.setText("Köttfärs 10kr");
        mincedMeatCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mincedMeatCheckActionPerformed(evt);
            }
        });

        confirm.setText("Bekräfta");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mincedMeatCheck)
                    .addComponent(onionCheck)
                    .addComponent(pineapleCheck)
                    .addComponent(chilliPeppersCheck)
                    .addComponent(olivesCheck)
                    .addComponent(hamCheck)
                    .addComponent(cheeseCheck)
                    .addComponent(kebabMeatCheck)
                    .addComponent(kebabSauceCheck)
                    .addComponent(hotSauceCheck))
                .addContainerGap(165, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirm)
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(onionCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cheeseCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hamCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(olivesCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chilliPeppersCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kebabMeatCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hotSauceCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kebabSauceCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pineapleCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mincedMeatCheck)
                .addGap(18, 18, 18)
                .addComponent(confirm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hamCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hamCheckActionPerformed
        if (!hamCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Ham")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Vesuvio") || pizza.getName().equals("Hawaii")) {
                pizza.addIngredient(new Ingredients("Ham", 0));
            } else {
                pizza.addIngredient(new Ingredients("Ham", 10));
            }
        }
    }//GEN-LAST:event_hamCheckActionPerformed

    private void pineapleCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pineapleCheckActionPerformed
        if (!pineapleCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Pineaple")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Hawaii")) {
                pizza.addIngredient(new Ingredients("Pineaple", 0));
            } else {
                pizza.addIngredient(new Ingredients("Pineaple", 10));
            }
        }
    }//GEN-LAST:event_pineapleCheckActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed

        this.setVisible(false);

    }//GEN-LAST:event_confirmActionPerformed

    private void onionCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onionCheckActionPerformed

        if (!onionCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Onion")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Mexicana") || pizza.getName().equals("Kebab")) {
                pizza.addIngredient(new Ingredients("Onion", 0));
            } else {
                pizza.addIngredient(new Ingredients("Onion", 10));
            }
        }
    }//GEN-LAST:event_onionCheckActionPerformed

    private void cheeseCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cheeseCheckActionPerformed
        if (!cheeseCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Extra Cheese")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            pizza.addIngredient(new Ingredients("Extra Cheese", 10));
        }
    }//GEN-LAST:event_cheeseCheckActionPerformed

    private void olivesCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_olivesCheckActionPerformed
        if (!olivesCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Olives")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            pizza.addIngredient(new Ingredients("Olives", 10));
        }
    }//GEN-LAST:event_olivesCheckActionPerformed

    private void chilliPeppersCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chilliPeppersCheckActionPerformed
        if (!chilliPeppersCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Chilli Peppers")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Kebab")) {
                pizza.addIngredient(new Ingredients("Chilli Peppers", 0));
            }
            pizza.addIngredient(new Ingredients("Chilli Peppers", 10));
        }
    }//GEN-LAST:event_chilliPeppersCheckActionPerformed

    private void kebabMeatCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kebabMeatCheckActionPerformed
        if (!kebabMeatCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Kebab Meat")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Kebab")) {
                pizza.addIngredient(new Ingredients("Kebab Meat", 0));
            }
            pizza.addIngredient(new Ingredients("Kebab Meat", 10));
        }
    }//GEN-LAST:event_kebabMeatCheckActionPerformed

    private void hotSauceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotSauceCheckActionPerformed
        if (!hotSauceCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Hot Sauce")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Mexicana")) {
                pizza.addIngredient(new Ingredients("Hot Sauce", 0));
            } else {
                pizza.addIngredient(new Ingredients("Hot Sauce", 10));
            }
        }
    }//GEN-LAST:event_hotSauceCheckActionPerformed

    private void kebabSauceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kebabSauceCheckActionPerformed
        if (!kebabSauceCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Kebab Sauce")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if (pizza.getName().equals("Kebab")) {
                pizza.addIngredient(new Ingredients("Kebab Sauce", 0));
            } else {
                pizza.addIngredient(new Ingredients("Kebab Sauce", 10));
            }
        }
    }//GEN-LAST:event_kebabSauceCheckActionPerformed

    private void mincedMeatCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mincedMeatCheckActionPerformed
        if (!mincedMeatCheck.isSelected()) {
            for (int i = 0; i < pizza.getIngredients().size(); i++) {
                if (pizza.getIngredients().get(i).getName().equals("Minced Meat")) {
                    pizza.removeIngredient(pizza.getIngredients().get(i));
                }
            }
        } else {
            if(pizza.getName().equals("Mexicana")){
                pizza.addIngredient(new Ingredients("Minced Meat",0));
            }else {
            pizza.addIngredient(new Ingredients("Minced Meat", 10));
            }
        }
    }//GEN-LAST:event_mincedMeatCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyPizzaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyPizzaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyPizzaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyPizzaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModifyPizzaView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cheeseCheck;
    private javax.swing.JCheckBox chilliPeppersCheck;
    private javax.swing.JButton confirm;
    private javax.swing.JCheckBox hamCheck;
    private javax.swing.JCheckBox hotSauceCheck;
    private javax.swing.JCheckBox kebabMeatCheck;
    private javax.swing.JCheckBox kebabSauceCheck;
    private javax.swing.JCheckBox mincedMeatCheck;
    private javax.swing.JCheckBox olivesCheck;
    private javax.swing.JCheckBox onionCheck;
    private javax.swing.JCheckBox pineapleCheck;
    // End of variables declaration//GEN-END:variables
}
